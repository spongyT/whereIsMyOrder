package com.spongyt.wimo.repository;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Shipper = new Property(3, String.class, "shipper", false, "SHIPPER");
        public final static Property DeliveryState = new Property(4, String.class, "deliveryState", false, "DELIVERY_STATE");
        public final static Property DeliveryStateText = new Property(5, String.class, "deliveryStateText", false, "DELIVERY_STATE_TEXT");
        public final static Property IsSentByUser = new Property(6, Boolean.class, "isSentByUser", false, "IS_SENT_BY_USER");
        public final static Property IsSynced = new Property(7, Boolean.class, "isSynced", false, "IS_SYNCED");
        public final static Property CreatedTimeStamp = new Property(8, Long.class, "createdTimeStamp", false, "CREATED_TIME_STAMP");
    };


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_NUMBER\" TEXT NOT NULL ," + // 1: orderNumber
                "\"NAME\" TEXT," + // 2: name
                "\"SHIPPER\" TEXT," + // 3: shipper
                "\"DELIVERY_STATE\" TEXT," + // 4: deliveryState
                "\"DELIVERY_STATE_TEXT\" TEXT," + // 5: deliveryStateText
                "\"IS_SENT_BY_USER\" INTEGER," + // 6: isSentByUser
                "\"IS_SYNCED\" INTEGER," + // 7: isSynced
                "\"CREATED_TIME_STAMP\" INTEGER);"); // 8: createdTimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderNumber());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String shipper = entity.getShipper();
        if (shipper != null) {
            stmt.bindString(4, shipper);
        }
 
        String deliveryState = entity.getDeliveryState();
        if (deliveryState != null) {
            stmt.bindString(5, deliveryState);
        }
 
        String deliveryStateText = entity.getDeliveryStateText();
        if (deliveryStateText != null) {
            stmt.bindString(6, deliveryStateText);
        }
 
        Boolean isSentByUser = entity.getIsSentByUser();
        if (isSentByUser != null) {
            stmt.bindLong(7, isSentByUser ? 1L: 0L);
        }
 
        Boolean isSynced = entity.getIsSynced();
        if (isSynced != null) {
            stmt.bindLong(8, isSynced ? 1L: 0L);
        }
 
        Long createdTimeStamp = entity.getCreatedTimeStamp();
        if (createdTimeStamp != null) {
            stmt.bindLong(9, createdTimeStamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shipper
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deliveryState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deliveryStateText
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isSentByUser
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isSynced
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // createdTimeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShipper(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeliveryState(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeliveryStateText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSentByUser(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsSynced(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setCreatedTimeStamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
